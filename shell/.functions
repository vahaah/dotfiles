#!/usr/bin/env bash

# `.functions` provides helper functions for shell.
#
# This file is used as a part of `.shell_env`


# === Commonly used functions ===

pyclean () {
    # Cleans py[cod] and __pychache__ dirs in the current tree:
    find . | grep -E "(__pycache__|\.py[cod]$)" | xargs rm -rf
}


git-dowloadfolder () {
    # Downloads folder from git repository.
    url="$1"
    svn checkout ${url/tree\/master/trunk}
}


mc () {
    # Create a new directory and enter it
    mkdir -p "$@" && cd "$@"
}


cdf () {
    # cd into whatever is the forefront Finder window.
    local path=$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')
    echo "$path"
    cd "$path"
}


pgkill () {
    # Kills postgres process.
    psql postgres -c "SELECT pg_terminate_backend(pg_stat_activity.pid)
FROM pg_stat_activity
WHERE pg_stat_activity.datname = '$1'
    AND pid <> pg_backend_pid();"
}

# From Dan Ryan's blog - http://danryan.co/using-antigen-for-zsh.html
man() {
    # Shows pretty `man` page.
    env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
    man "$@"
}

loadenv() {
    while read line; do
        if [ "${line:0:1}" = '#' ]; then
            continue
        fi
        export $line > /dev/null
    done < "$1"
    echo 'Loaded!'
}

# Cabal

function cupload() {
    cabal upload "$1" -u vahaah
}

function cupload-doc() {
    cabal upload -d "$1" --publish -u vahaah
}

# === Chat GPT functions ===
# model: gpt-4 is in private beta (have to get from waitlist)
# model: gpt-3.5-turbo (if you don't have access)

function hey_gpt() {
    local prompt="$1"
    curl -s https://api.openai.com/v1/chat/completions \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $OPENAI_API_KEY" \
        -d '{
        "model": "gpt-4",
        "messages": [{"role": "user", "content": "'$prompt'"}],
        "temperature": 0.7
    }' | jq -r '.choices[0].message.content'
}

alias h='hey_gpt'

function data_gpt() {
    local prompt="$1"
    local data="$2"
    local prompt_input="$prompt: $data"

    curl -s https://api.openai.com/v1/chat/completions \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -d '{
        "model": "gpt-4",
        "messages": [{"role": "user", "content": "'$prompt_input'"}],
        "temperature": 0.7
    }' | jq -r '.choices[0].message.content'
}

alias dgpt='data_gpt'

function img_gpt() {
  local prompt="$1"

  create_img=$(curl -s https://api.openai.com/v1/images/generations \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENAI_API_KEY" \
    -d '{
        "prompt": "'$prompt'",
        "n": 1,
        "size": "1024x1024"
    }')

  echo "$create_img" | jq
  url=$(echo "$create_img" | jq -r '.data[0].url')
  rand_num=$((RANDOM % 1000000 + 1))
  curl -s "$url" -o "img-$rand_num.png"
}
