#!/usr/bin/env bash

# `.exports` is used to provide custom variables.
#
# This file is used as a part of `.shell_env`

if [ "$CODESPACES" = true ]; then
  HOMEBREW_DIR="/usr/local"
  OPENSSL_DIR="/usr/local/opt/openssl"
else
  HOMEBREW_DIR="/opt/homebrew"
  OPENSSL_DIR=/opt/homebrew/opt/openssl@3
fi

# === Compiler flags ===
# This is required because `openssl` is keg-only in `brew`,
# see: `brew info openssl` for more information.
PATH="$OPENSSL_DIR/bin:$PATH"

export LDFLAGS="-L$OPENSSL_DIR/lib"
export CPPFLAGS="-I$OPENSSL_DIR/include"
export CFLAGS="-I$(xcrun --show-sdk-path)/usr/include"
export PKG_CONFIG_PATH="$OPENSSL_DIR/lib/pkgconfig"

# This is required because `libxml2` is keg-only in `brew`,
# see: `brew info libxml2` for more information
PATH="$HOMEBREW_DIR/opt/libxml2/bin:$PATH"

export LDFLAGS="-L$HOMEBREW_DIR/opt/libxml2/lib"
export CPPFLAGS="-I$HOMEBREW_DIR/opt/libxml2/include"
export PKG_CONFIG_PATH="$HOMEBREW_DIR/opt/libxml2/lib/pkgconfig"

# This is required because `libomp` is keg-only in `brew`,
# see: `brew info libomp` for more information
export LDFLAGS="-L$HOMEBREW_DIR/opt/libomp/lib"
export CPPFLAGS="-I$HOMEBREW_DIR/opt/libomp/include"

# This is required because `openjdk` is keg-only in `brew`,
# see: `brew info openjdk` for more information
PATH="$HOMEBREW_DIR/opt/openjdk/bin:$PATH"

export CPPFLAGS="-I$HOMEBREW_DIR/opt/openjdk/include"


# === Path modifications ===

# These lines should be the first ones!

# GPG agent:
PATH="$HOMEBREW_DIR/opt/gpg-agent/bin:$PATH"

# Adds `pipx` binary files:
PATH="$HOME/.local/bin:$PATH"

# Adds `poetry` binary, should be added to the end:
PATH="$HOME/.poetry/bin:$PATH"

# postgres@14 utilities like `psql`:
if [ "$CODESPACES" = true ]; then
  PATH="$HOMEBREW_DIR/opt/postgresql/bin:$PATH"
else
  PATH="$HOMEBREW_DIR/opt/postgresql@15/bin:$PATH"
fi
# npm:
PATH="$HOMEBREW_DIR/share/npm/bin:$PATH"

# go:
export GOPATH="$HOME/Go/"

# Ruby build
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=${OPENSSL_DIR}"


# === General ===

# Editor:
export EDITOR=$(which nano)

# GPG:
export GPG_TTY=$(tty)
eval "$(gpg-agent --daemon --allow-preset-passphrase > /dev/null 2>&1)"

# Make Python use UTF-8 encoding for output to stdin, stdout, and stderr.
export PYTHONIOENCODING='UTF-8'

# Homebrew:
export HOMEBREW_NO_ANALYTICS=1  # disables statistics that brew collects

# Pagers:
# This affects every invocation of `less`.
#
#   -i   case-insensitive search unless search string contains uppercase letters
#   -R   color
#   -F   exit if there is less than one page of content
#   -X   keep content on screen after exit
#   -M   show more info at the bottom prompt line
#   -x4  tabs are 4 instead of 8
export LESS="-iRFXMx4"
export PAGER='less'
export MANPAGER='less'


# === Version managers ===

# nvm:
export NVM_DIR="$HOME/.nvm"
source "$HOMEBREW_DIR/opt/nvm/nvm.sh"

# pyenv:
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# rbenv:
eval "$(rbenv init -)"

# rustup:
# source "$HOME/.cargo/env"


# === Histories ===

# Enable persistent REPL history for `node`.
export NODE_REPL_HISTORY="$HOME/.node_history"
# Use sloppy mode by default, matching web browsers.
export NODE_REPL_MODE='sloppy'

# Erlang and Elixir shell history:
export ERL_AFLAGS="-kernel shell_history enabled"


# === Code highlight ===
# https://github.com/zsh-users/zsh-syntax-highlighting

# We won't highlight code longer than 200 chars, because it is slow:
export ZSH_HIGHLIGHT_MAXLENGTH=200

# starship:
eval "$(starship init zsh)"

# GitHub:
eval "$(gh completion --shell zsh)"

# tldr:
source ~/.tldr.complete


# === PATH ===

# This should be the last line:
export PATH
